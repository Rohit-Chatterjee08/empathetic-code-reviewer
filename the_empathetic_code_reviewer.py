# -*- coding: utf-8 -*-
"""The Empathetic Code Reviewer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQEAXUUNdufBSpEzRqz8FZg3Lt-nm_rQ
"""

import os
import requests
import json
import time
import gradio as gr

# --- Configuration ---
# This block now correctly handles getting the API key from Colab secrets.
API_KEY = None
try:
    # First, try to get the key from Colab's secrets manager.
    from google.colab import userdata
    API_KEY = userdata.get('GOOGLE_API_KEY')
    print("‚úÖ Successfully loaded API key from Colab secrets.")
except (ImportError, KeyError):
    # If not in Colab or key not found, fall back to environment variables.
    print("Could not find Colab secrets. Checking for environment variable...")
    API_KEY = os.environ.get("GOOGLE_API_KEY")
    if API_KEY:
        print("‚úÖ Successfully loaded API key from environment variable.")


# --- Core AI Logic (from previous script) ---

def call_gemini_api(prompt, retries=3, delay=2):
    """
    Calls the Gemini API with a given prompt and handles retries.
    """
    if not API_KEY:
        raise gr.Error("GOOGLE_API_KEY is not set. Please add it to Colab secrets or set it as an environment variable.")

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={API_KEY}"

    # The fix is here: maxOutputTokens is increased to the maximum allowed value.
    payload = {
      "contents": [{"role": "user", "parts": [{"text": prompt}]}],
      "generationConfig": {
        "temperature": 0.4,
        "topP": 1,
        "topK": 32,
        "maxOutputTokens": 8192, # Increased from 2048 to the maximum
      }
    }

    for attempt in range(retries):
        try:
            response = requests.post(api_url, json=payload, headers={'Content-Type': 'application/json'})
            response.raise_for_status()

            result = response.json()

            if 'candidates' in result and result['candidates']:
                candidate = result['candidates'][0]
                # This check is now more robust. It ensures the text part exists.
                if 'content' in candidate and 'parts' in candidate.get('content', {}) and candidate['content']['parts'][0].get('text'):
                    finish_reason = candidate.get('finishReason')
                    if finish_reason == 'MAX_TOKENS':
                        # This is a specific warning if we still hit the limit, though it's unlikely now.
                        print(f"Warning: API call finished because it hit the maximum token limit. The output might be truncated.")
                    elif finish_reason != 'STOP':
                        print(f"Warning: API call finished with reason: {finish_reason}. Output may be incomplete.")
                    return candidate['content']['parts'][0]['text']

            error_details = f"Full response: {result}"
            if 'promptFeedback' in result and 'blockReason' in result['promptFeedback']:
                 error_details = f"Prompt was blocked. Reason: {result['promptFeedback']['blockReason']}"
            raise ValueError(f"Invalid or empty response structure from API. {error_details}")

        except requests.exceptions.RequestException as e:
            print(f"API request failed: {e}. Retrying in {delay}s...")
            time.sleep(delay)
            delay *= 2
        except (ValueError, KeyError, IndexError) as e:
            print(f"Error processing API response: {e}")
            raise gr.Error(f"Error processing API response: {e}")

    raise gr.Error("The AI model failed to respond after multiple retries.")


def generate_empathetic_report(code_snippet, review_comments, progress=gr.Progress()):
    """
    Main function to generate the report. It's now adapted for Gradio.
    """
    if not code_snippet.strip() or not review_comments.strip():
        raise gr.Error("Please provide both a code snippet and review comments.")

    comments_array = [c.strip() for c in review_comments.split('\n') if c.strip()]
    total_steps = len(comments_array) + 1 # +1 for the final summary

    full_report = "## üìù Empathetic Code Review Analysis\n\n"

    # 1. Get detailed analysis for each comment
    for i, comment in enumerate(comments_array):
        progress((i + 1) / total_steps, desc=f"Analyzing comment {i+1}/{len(comments_array)}: '{comment[:30]}...'")

        master_prompt = f"""
          You are an expert, empathetic senior software developer and a patient mentor. Your goal is to review a junior developer's code by transforming critical feedback into a supportive and educational experience.
          You will be given a snippet of Python code and a single critical comment about it.
          Your task is to generate a detailed and constructive analysis for that single comment. Your response must be in Markdown format and strictly follow this structure:
          1.  **Positive Rephrasing:** Rewrite the original comment to be gentle, encouraging, and respectful.
          2.  **The 'Why':** Clearly explain the underlying software engineering principle. If applicable, provide a URL to external documentation.
          3.  **Suggested Improvement:** Provide a concrete, corrected code example.
          ---
          Here is the code snippet:
          ```python
          {code_snippet}
          ```
          Here is the critical comment you need to analyze:
          "{comment}"
          Now, generate the Markdown report for this specific comment, starting with a level 3 heading (###) for the original comment.
        """
        generated_part = call_gemini_api(master_prompt)
        full_report += generated_part + "\n\n---\n\n"

    # 2. Get the holistic summary
    progress(total_steps / total_steps, desc="‚úçÔ∏è Generating final summary...")
    summary_prompt = f"""
        You are an expert, empathetic senior software developer. You have just provided detailed feedback on a few specific points in a junior developer's code.
        Your task is to write a brief, holistic summary paragraph that concludes the code review on an encouraging and positive note.
        Here is the original code for context:
        ```python
        {code_snippet}
        ```
        Here are the original review comments that were addressed:
        {chr(10).join([f'- "{c}"' for c in comments_array])}
        Write a single, encouraging summary paragraph under a "Final Thoughts" heading.
    """
    summary_part = call_gemini_api(summary_prompt)
    full_report += f"### ‚ú® Final Thoughts\n\n{summary_part}"

    return full_report

# --- Gradio Web Interface Definition ---

# Define some example inputs for the UI
example_code = 'def get_active_users(users):\n  results = []\n  for u in users:\n    if u.is_active == True and u.profile_complete == True:\n      results.append(u)\n  return results'
example_comments = 'This is inefficient. Don\'t loop twice conceptually.\nVariable \'u\' is a bad name.\nBoolean comparison \'== True\' is redundant.'

# Use gr.Blocks for more layout control
with gr.Blocks(theme=gr.themes.Soft(), css=".gradio-container {max-width: 960px !important; margin: auto !important;}") as demo:
    gr.Markdown(
        """
        # The Empathetic Code Reviewer
        Transforming critical feedback into constructive, educational growth.
        Enter a code snippet and some direct review comments, and the AI will rewrite them to be supportive and helpful.
        """
    )

    with gr.Row():
        with gr.Column(scale=1):
            gr.Markdown("### 1. Input")
            code_input = gr.Code(
                label="Code Snippet",
                language="python",
                value=example_code,
                lines=10
            )
            comments_input = gr.Textbox(
                label="Review Comments (one per line)",
                lines=5,
                value=example_comments
            )
            submit_btn = gr.Button("Generate Empathetic Report", variant="primary")

        with gr.Column(scale=1):
            gr.Markdown("### 2. AI-Generated Report")
            report_output = gr.Markdown(
                label="Report",
                value="Your constructive feedback report will appear here."
            )

    # Define the click action
    submit_btn.click(
        fn=generate_empathetic_report,
        inputs=[code_input, comments_input],
        outputs=report_output
    )

# --- Launch the App ---
if __name__ == "__main__":
    if not API_KEY:
        print("üö® CRITICAL ERROR: GOOGLE_API_KEY not found.")
        print("üö® Please add it to your Colab secrets (under the key icon) or set it as an environment variable.")

    # In Colab, share=True is needed to get a public link. debug=True shows errors in the notebook.
    demo.launch(share=True, debug=True)

pip install gradio

